public class Ftputil {

	private FTPClient ftpClient;
	private String fileName, strencoding;
	private String ip = "120.55.66.173"; // 服务器IP地址
	private String userName = "666"; // 用户名
	private String userPwd = "999"; // 密码
	private int port = 21; // 端口号
	private String path = "/SZX348/OPFQ/"; // 读取文件的存放目录

	/**
	 * init ftp servere
	 */
	public Ftputil() {
		this.reSet();
	}

	public void reSet() {
		// 以当前系统时间拼接文件名
		strencoding = "UTF-8";
		ip = PropertiesUtil.getValue("inttravgm.ip");
		port = Integer.parseInt(PropertiesUtil.getValue("inttravgm.port"));
		userName = PropertiesUtil.getValue("inttravgm.username");
		userPwd = PropertiesUtil.getValue("inttravgm.psd");
		path = PropertiesUtil.getValue("inttravgm.inpass");
		
		this.connectServer(ip, port, userName, userPwd, path);
	}

	/**
	 * @param ip
	 * @param port
	 * @param userName
	 * @param userPwd
	 * @param path
	 * @throws SocketException
	 * @throws IOException
	 *             function:连接到服务器
	 */
	public void connectServer(String ip, int port, String userName, String userPwd, String path) {
		ftpClient = new FTPClient();
		try {
			// 连接
			ftpClient.connect(ip, port);
			// 登录
			ftpClient.login(userName, userPwd);
			System.out.println("FTP opened");
			if (path != null && path.length() > 0) {
				// 跳转到指定目录
				ftpClient.changeWorkingDirectory(path);
			}
		} catch (SocketException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * @throws IOException
	 *             function:关闭连接
	 */
	public void closeServer() {
		if (ftpClient.isConnected()) {
			try {
				ftpClient.logout();
				ftpClient.disconnect();
				System.out.println("FTP closed");
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	/**
	 * @param path
	 * @return function:读取指定目录下的文件名
	 * @throws IOException
	 */
	public List<String> getFileList(String path) {
		List<String> fileLists = new ArrayList<String>();
		// 获得指定目录下所有文件名
		FTPFile[] ftpFiles = null;
		try {
			ftpFiles = ftpClient.listFiles(path);
		} catch (IOException e) {
			e.printStackTrace();
		}
		for (int i = 0; ftpFiles != null && i < ftpFiles.length; i++) {
			FTPFile file = ftpFiles[i];
			if (file.isFile()) {
				fileLists.add(file.getName());
			}
		}
		return fileLists;
	}

	/**
	 * @param fileName
	 * @return function:从服务器上读取指定的文件
	 * @throws ParseException
	 * @throws IOException
	 */
	public String readFile(String filename) throws ParseException {
		InputStream ins = null;
		StringBuilder builder = null;
		try {
			// 从服务器上读取指定的文件
			ins = ftpClient.retrieveFileStream(filename);
			BufferedReader reader = new BufferedReader(new InputStreamReader(ins, strencoding));
			String line;
			builder = new StringBuilder(150);
			while ((line = reader.readLine()) != null) {
				System.out.println(line);
				builder.append(line+"\r\n");
			}
			reader.close();
			if (ins != null) {
				ins.close();
			}
			// 主动调用一次getReply()把接下来的226消费掉. 这样做是可以解决这个返回null问题
			ftpClient.getReply();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return builder.toString();
	}

	/**
	 * @param fileName
	 *            function:删除文件
	 */
	public void deleteFile(String fileName) {
		try {
			ftpClient.deleteFile(fileName);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
